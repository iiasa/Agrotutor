// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Agrotutor.Core.Cimmyt.InvestigationPlatforms;
//
//    var investigationPlatforms = InvestigationPlatforms.FromJson(jsonString);

using System.IO;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.Extensions.Localization;
using Prism;
using Xamarin.Essentials;
using XF.Material.Forms.UI.Dialogs;

namespace Agrotutor.Core.Cimmyt.InvestigationPlatforms
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class InvestigationPlatforms
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("crs", NullValueHandling = NullValueHandling.Ignore)]
        public Crs Crs { get; set; }

        [JsonProperty("features", NullValueHandling = NullValueHandling.Ignore)]
        public List<Feature> Features { get; set; }
        
        public static async Task<InvestigationPlatforms> FromEmbeddedResource()
        {
            var stringLocalizer = (IStringLocalizer<InvestigationPlatforms>)PrismApplicationBase.Current.Container.Resolve(typeof(IStringLocalizer<InvestigationPlatforms>));
            using (await MaterialDialog.Instance.LoadingSnackbarAsync(message: stringLocalizer.GetString("loading")))
            {
                Assembly assembly = Assembly.GetExecutingAssembly();
                string resourceName = Constants.InvestigationPlatformsFile;

                string result;

                using (Stream stream = assembly.GetManifestResourceStream(resourceName))
                using (StreamReader reader = new StreamReader(stream))
                {
                    result = await reader.ReadToEndAsync();
                }

                return FromJson(result);
            }
        }
    }

    public partial class Crs
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public CrsProperties Properties { get; set; }
    }

    public partial class CrsProperties
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class Feature
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FeatureProperties Properties { get; set; }

        [JsonProperty("geometry", NullValueHandling = NullValueHandling.Ignore)]
        public Geometry Geometry { get; set; }
    }

    public partial class Geometry
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("coordinates", NullValueHandling = NullValueHandling.Ignore)]
        public List<double> Coordinates { get; set; }
        
        public Location ToLocation()
        {
            return new Location(Coordinates[1], Coordinates[0]);
        }
    }

    public partial class FeatureProperties
    {
        [JsonProperty("NUM_ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumId { get; set; }

        [JsonProperty("NOM_PLAT", NullValueHandling = NullValueHandling.Ignore)]
        public string NomPlat { get; set; }

        [JsonProperty("HUB", NullValueHandling = NullValueHandling.Ignore)]
        public string Hub { get; set; }

        [JsonProperty("ABRVIACION", NullValueHandling = NullValueHandling.Ignore)]
        public string Abrviacion { get; set; }

        [JsonProperty("ANIO_INST", NullValueHandling = NullValueHandling.Ignore)]
        public long? AnioInst { get; set; }

        [JsonProperty("ESTADO", NullValueHandling = NullValueHandling.Ignore)]
        public string Estado { get; set; }

        [JsonProperty("MUNICIPIO", NullValueHandling = NullValueHandling.Ignore)]
        public string Municipio { get; set; }

        [JsonProperty("LOCALIDAD", NullValueHandling = NullValueHandling.Ignore)]
        public string Localidad { get; set; }

        [JsonProperty("DIRECCION", NullValueHandling = NullValueHandling.Ignore)]
        public string Direccion { get; set; }

        [JsonProperty("LATITUD", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitud { get; set; }

        [JsonProperty("LONGITUD", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitud { get; set; }

        [JsonProperty("ASNM", NullValueHandling = NullValueHandling.Ignore)]
        public string Asnm { get; set; }

        [JsonProperty("INST_COLAB", NullValueHandling = NullValueHandling.Ignore)]
        public string InstColab { get; set; }

        [JsonProperty("CAMPUS", NullValueHandling = NullValueHandling.Ignore)]
        public string Campus { get; set; }

        [JsonProperty("INV_RESP", NullValueHandling = NullValueHandling.Ignore)]
        public string InvResp { get; set; }

        [JsonProperty("TEL_IR", NullValueHandling = NullValueHandling.Ignore)]
        public string TelIr { get; set; }

        [JsonProperty("EMAIL_IR", NullValueHandling = NullValueHandling.Ignore)]
        public string EmailIr { get; set; }

        [JsonProperty("TEC_RESP", NullValueHandling = NullValueHandling.Ignore)]
        public string TecResp { get; set; }

        [JsonProperty("TEL_TR", NullValueHandling = NullValueHandling.Ignore)]
        public string TelTr { get; set; }

        [JsonProperty("EMAIL_TR")]
        public string EmailTr { get; set; }

        [JsonProperty("CUL_PRINC", NullValueHandling = NullValueHandling.Ignore)]
        public string CulPrinc { get; set; }

        [JsonProperty("CICLO_AGRI", NullValueHandling = NullValueHandling.Ignore)]
        public string CicloAgri { get; set; }

        [JsonProperty("REG_HUM_PV", NullValueHandling = NullValueHandling.Ignore)]
        public string RegHumPv { get; set; }

        [JsonProperty("REG_HUM_OI", NullValueHandling = NullValueHandling.Ignore)]
        public string RegHumOi { get; set; }
    }

    public partial class InvestigationPlatforms
    {
        public static InvestigationPlatforms FromJson(string json) => JsonConvert.DeserializeObject<InvestigationPlatforms>(json, Agrotutor.Core.Cimmyt.InvestigationPlatforms.InvestigationPlatformConverter.Settings);
    }

    public static class SerializeInvestigationPlatform
    {
        public static string ToJson(this InvestigationPlatforms self) => JsonConvert.SerializeObject(self, Agrotutor.Core.Cimmyt.InvestigationPlatforms.InvestigationPlatformConverter.Settings);
    }

    internal static class InvestigationPlatformConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

