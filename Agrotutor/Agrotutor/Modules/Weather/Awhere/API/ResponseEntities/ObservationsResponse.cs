// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Agrotutor.Modules.Weather.Awhere.API.ResponseEntities;
//
//    var observationsResponse = ObservationsResponse.FromJson(jsonString);

namespace Agrotutor.Modules.Weather.Awhere.API.ResponseEntities
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class ObservationsResponse
    {
        [JsonProperty("observations", NullValueHandling = NullValueHandling.Ignore)]
        public List<ObservationResponseObservation> Observations { get; set; }

        [JsonProperty("_links", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationsResponseLinks Links { get; set; }
        
        public static ObservationsResponse FromJson(string json) => JsonConvert.DeserializeObject<ObservationsResponse>(json, Agrotutor.Modules.Weather.Awhere.API.ResponseEntities.ObservationsResponseConverter.Settings);
    }

    public class ObservationsResponseLinks
    {
        [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponseLink Self { get; set; }

        [JsonProperty("next", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponseLink Next { get; set; }

        [JsonProperty("prev", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponseLink Previous { get; set; }
    }

    public class ObservationResponseLink
    {
        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public string Href { get; set; }
    }

    public class ObservationResponseObservation
    {
        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Date { get; set; }

        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponseLocation Location { get; set; }

        [JsonProperty("temperatures", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponseTemperatures Temperatures { get; set; }

        [JsonProperty("precipitation", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponsePrecipitation Precipitation { get; set; }

        [JsonProperty("solar", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponsePrecipitation Solar { get; set; }

        [JsonProperty("relativeHumidity", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponseRelativeHumidity RelativeHumidity { get; set; }

        [JsonProperty("wind", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponseWind Wind { get; set; }

        [JsonProperty("_links", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationLinks Links { get; set; }
    }

    public class ObservationLinks
    {
        [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationResponseLink Self { get; set; }
    }

    public class ObservationResponseLocation
    {
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public long? Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public long? Longitude { get; set; }
    }

    public class ObservationResponsePrecipitation
    {
        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public string Units { get; set; }
    }

    public class ObservationResponseRelativeHumidity
    {
        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public double? Max { get; set; }

        [JsonProperty("min", NullValueHandling = NullValueHandling.Ignore)]
        public double? Min { get; set; }
    }

    public class ObservationResponseTemperatures
    {
        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public double? Max { get; set; }

        [JsonProperty("min", NullValueHandling = NullValueHandling.Ignore)]
        public double? Min { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public string Units { get; set; }
    }

    public class ObservationResponseWind
    {
        [JsonProperty("morningMax", NullValueHandling = NullValueHandling.Ignore)]
        public double? MorningMax { get; set; }

        [JsonProperty("dayMax", NullValueHandling = NullValueHandling.Ignore)]
        public double? DayMax { get; set; }

        [JsonProperty("average", NullValueHandling = NullValueHandling.Ignore)]
        public double? Average { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public string Units { get; set; }
    }

    public static class ObservationsResponseSerializer
    {
        public static string ToJson(this ObservationsResponse self) => JsonConvert.SerializeObject(self, Agrotutor.Modules.Weather.Awhere.API.ResponseEntities.ObservationsResponseConverter.Settings);
    }

    internal static class ObservationsResponseConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
