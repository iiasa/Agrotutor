// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Agrotutor.Modules.Weather.Awhere.API.ResponseEntities;
//
//    var observationsResponse = ObservationsResponse.FromJson(jsonString);

namespace Agrotutor.Modules.Weather.Awhere.API.ResponseEntities
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class ObservationsResponse
    {
        [JsonProperty("observations", NullValueHandling = NullValueHandling.Ignore)]
        public List<Observation> Observations { get; set; }

        [JsonProperty("_links", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationsResponseLinks Links { get; set; }
        
        public static ObservationsResponse FromJson(string json) => JsonConvert.DeserializeObject<ObservationsResponse>(json, Agrotutor.Modules.Weather.Awhere.API.ResponseEntities.ObservationsConverter.Settings);

    }

    public class ObservationsResponseLinks
    {
        [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationsLink Self { get; set; }

        [JsonProperty("next", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationsLink Next { get; set; }

        [JsonProperty("prev", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationsLink Prev { get; set; }
    }

    public class ObservationsLink
    {
        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public string Href { get; set; }
    }

    public class Observation
    {
        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Date { get; set; }

        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationLocation Location { get; set; }

        [JsonProperty("temperatures", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationTemperatures Temperatures { get; set; }

        [JsonProperty("precipitation", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationPrecipitation Precipitation { get; set; }

        [JsonProperty("solar", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationPrecipitation Solar { get; set; }

        [JsonProperty("relativeHumidity", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationRelativeHumidity RelativeHumidity { get; set; }

        [JsonProperty("wind", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationWind Wind { get; set; }

        [JsonProperty("_links", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationLinks Links { get; set; }
    }

    public class ObservationLinks
    {
        [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationsLink Self { get; set; }
    }

    public class ObservationLocation
    {
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public long? Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public long? Longitude { get; set; }
    }

    public class ObservationPrecipitation
    {
        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationPrecipitationUnits? Units { get; set; }
    }

    public class ObservationRelativeHumidity
    {
        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public double? Max { get; set; }

        [JsonProperty("min", NullValueHandling = NullValueHandling.Ignore)]
        public double? Min { get; set; }
    }

    public class ObservationTemperatures
    {
        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public double? Max { get; set; }

        [JsonProperty("min", NullValueHandling = NullValueHandling.Ignore)]
        public double? Min { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationTemperaturesUnits? Units { get; set; }
    }

    public class ObservationWind
    {
        [JsonProperty("morningMax", NullValueHandling = NullValueHandling.Ignore)]
        public double? MorningMax { get; set; }

        [JsonProperty("dayMax", NullValueHandling = NullValueHandling.Ignore)]
        public double? DayMax { get; set; }

        [JsonProperty("average", NullValueHandling = NullValueHandling.Ignore)]
        public double? Average { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public ObservationWindUnits? Units { get; set; }
    }

    public enum ObservationPrecipitationUnits { Mm, WhM2 };

    public enum ObservationTemperaturesUnits { C };

    public enum ObservationWindUnits { MSec };

    public static class ObservationsSerializer
    {
        public static string ToJson(this ObservationsResponse self) => JsonConvert.SerializeObject(self, Agrotutor.Modules.Weather.Awhere.API.ResponseEntities.ObservationsConverter.Settings);
    }

    internal static class ObservationsConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ObservationPrecipitationUnitsConverter.Singleton,
                ObservationTemperaturesUnitsConverter.Singleton,
                ObservationWindUnitsConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ObservationPrecipitationUnitsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ObservationPrecipitationUnits) || t == typeof(ObservationPrecipitationUnits?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Wh/m^2":
                    return ObservationPrecipitationUnits.WhM2;
                case "mm":
                    return ObservationPrecipitationUnits.Mm;
            }
            throw new Exception("Cannot unmarshal type PrecipitationUnits");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ObservationPrecipitationUnits)untypedValue;
            switch (value)
            {
                case ObservationPrecipitationUnits.WhM2:
                    serializer.Serialize(writer, "Wh/m^2");
                    return;
                case ObservationPrecipitationUnits.Mm:
                    serializer.Serialize(writer, "mm");
                    return;
            }
            throw new Exception("Cannot marshal type PrecipitationUnits");
        }

        public static readonly ObservationPrecipitationUnitsConverter Singleton = new ObservationPrecipitationUnitsConverter();
    }

    internal class ObservationTemperaturesUnitsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ObservationTemperaturesUnits) || t == typeof(ObservationTemperaturesUnits?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "C")
            {
                return ObservationTemperaturesUnits.C;
            }
            throw new Exception("Cannot unmarshal type TemperaturesUnits");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ObservationTemperaturesUnits)untypedValue;
            if (value == ObservationTemperaturesUnits.C)
            {
                serializer.Serialize(writer, "C");
                return;
            }
            throw new Exception("Cannot marshal type TemperaturesUnits");
        }

        public static readonly ObservationTemperaturesUnitsConverter Singleton = new ObservationTemperaturesUnitsConverter();
    }

    internal class ObservationWindUnitsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ObservationWindUnits) || t == typeof(ObservationWindUnits?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "m/sec")
            {
                return ObservationWindUnits.MSec;
            }
            throw new Exception("Cannot unmarshal type WindUnits");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ObservationWindUnits)untypedValue;
            if (value == ObservationWindUnits.MSec)
            {
                serializer.Serialize(writer, "m/sec");
                return;
            }
            throw new Exception("Cannot marshal type WindUnits");
        }

        public static readonly ObservationWindUnitsConverter Singleton = new ObservationWindUnitsConverter();
    }
}
