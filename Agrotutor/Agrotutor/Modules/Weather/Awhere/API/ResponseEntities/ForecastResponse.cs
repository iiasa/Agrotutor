// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Agrotutor.Modules.Weather.Awhere.API.ResponseEntities;
//
//    var forecastResponse = ForecastResponse.FromJson(jsonString);

namespace Agrotutor.Modules.Weather.Awhere.API.ResponseEntities
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class ForecastResponse
    {
        [JsonProperty("forecasts", NullValueHandling = NullValueHandling.Ignore)]
        public List<ForecastResponseForecastDay> Forecasts { get; set; }

        [JsonProperty("_links", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseLinks Links { get; set; }
        
        public static ForecastResponse FromJson(string json) => JsonConvert.DeserializeObject<ForecastResponse>(json, Agrotutor.Modules.Weather.Awhere.API.ResponseEntities.ForecastResponseConverter.Settings);
    }

    public class ForecastResponseForecastDay
    {
        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Date { get; set; }

        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseLocation Location { get; set; }

        [JsonProperty("forecast", NullValueHandling = NullValueHandling.Ignore)]
        public List<ForecastResponseForecastHour> Forecast { get; set; }

        [JsonProperty("_links", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseLinks Links { get; set; }
    }

    public class ForecastResponseForecastHour
    {
        [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? StartTime { get; set; }

        [JsonProperty("endTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? EndTime { get; set; }

        [JsonProperty("conditionsCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ConditionsCode { get; set; }

        [JsonProperty("conditionsText", NullValueHandling = NullValueHandling.Ignore)]
        public string ConditionsText { get; set; }

        [JsonProperty("temperatures", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseTemperatures Temperatures { get; set; }

        [JsonProperty("precipitation", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponsePrecipitation Precipitation { get; set; }

        [JsonProperty("sky", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseSky Sky { get; set; }

        [JsonProperty("solar", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseDewPoint Solar { get; set; }

        [JsonProperty("relativeHumidity", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseRelativeHumidity RelativeHumidity { get; set; }

        [JsonProperty("wind", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseTemperatures Wind { get; set; }

        [JsonProperty("dewPoint", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseDewPoint DewPoint { get; set; }

        [JsonProperty("soilTemperatures", NullValueHandling = NullValueHandling.Ignore)]
        public List<ForecastResponseRelativeHumidity> SoilTemperatures { get; set; }

        [JsonProperty("soilMoisture", NullValueHandling = NullValueHandling.Ignore)]
        public List<ForecastResponseRelativeHumidity> SoilMoisture { get; set; }
    }

    public class ForecastResponseDewPoint
    {
        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public string Units { get; set; }
    }

    public class ForecastResponsePrecipitation
    {
        [JsonProperty("chance", NullValueHandling = NullValueHandling.Ignore)]
        public double? Chance { get; set; }

        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public string Units { get; set; }
    }

    public class ForecastResponseRelativeHumidity
    {
        [JsonProperty("average", NullValueHandling = NullValueHandling.Ignore)]
        public double? Average { get; set; }

        [JsonProperty("max")]
        public object Max { get; set; }

        [JsonProperty("min")]
        public object Min { get; set; }

        [JsonProperty("depth", NullValueHandling = NullValueHandling.Ignore)]
        public string Depth { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public string Units { get; set; }
    }

    public class ForecastResponseSky
    {
        [JsonProperty("cloudCover", NullValueHandling = NullValueHandling.Ignore)]
        public long? CloudCover { get; set; }

        [JsonProperty("sunshine", NullValueHandling = NullValueHandling.Ignore)]
        public long? Sunshine { get; set; }
    }

    public class ForecastResponseTemperatures
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }

        [JsonProperty("max")]
        public double? Max { get; set; }

        [JsonProperty("min")]
        public double? Min { get; set; }

        [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
        public string Units { get; set; }

        [JsonProperty("average", NullValueHandling = NullValueHandling.Ignore)]
        public double? Average { get; set; }
    }

    public class ForecastResponseLinks
    {
        [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
        public ForecastResponseSelf Self { get; set; }
    }

    public class ForecastResponseSelf
    {
        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public string Href { get; set; }
    }

    public class ForecastResponseLocation
    {
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public long? Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public long? Longitude { get; set; }
    }

    public static class ForecastResponseSerializer
    {
        public static string ToJson(this ForecastResponse self) => JsonConvert.SerializeObject(self, Agrotutor.Modules.Weather.Awhere.API.ResponseEntities.ForecastResponseConverter.Settings);
    }

    internal static class ForecastResponseConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
